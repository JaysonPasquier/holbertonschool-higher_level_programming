>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test case 1: Valid matrix and divisor
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test case 2: Matrix with float numbers
>>> matrix = [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]
>>> matrix_divided(matrix, 2)
[[0.55, 1.1, 1.65], [2.2, 2.75, 3.3]]

# Test case 3: Empty matrix
>>> matrix_divided([], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 4: Matrix that's not a list of lists
>>> matrix_divided([1, 2, 3], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 5: Non-numeric divisor
>>> matrix_divided([[1, 2], [3, 4]], "3")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test case 6: Division by zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test case 7: Rows with different sizes
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test case 8: Non-numeric elements in matrix
>>> matrix_divided([[1, "2"], [3, 4]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 9: None as matrix
>>> matrix_divided(None, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 10: None as divisor
>>> matrix_divided([[1, 2], [3, 4]], None)
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test case 11: Large numbers
>>> matrix_divided([[1000, 2000], [3000, 4000]], 1000)
[[1.0, 2.0], [3.0, 4.0]]
